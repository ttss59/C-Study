1、进程类
Process

2、使用控制台打开文件案例
类的设计：
   1、文件类型的父类 CommonFile
属性：存储文件名
方法：打开文件的抽象方法OpenFile(); 
   2、TxtFile
构造函数：在创建TxtFile这个对象的时候，传入文件名
重写父类的抽象方法：OpenFile():根据用户输入的磁盘路径以及文件名。
通过我们的进程类(Process)去打开指定的文件

简单工厂的设计：
写了一个静态方法，根据用户输入的文件名的后缀名，去创建不同的对象。
由于，不晓得用户会输入什么类型的文件，所以在这个方法中返回的是父类类型，
但是，父类里面装的肯定是子类对象。


2、面向对象总复习
1)、类中的成员：字段、属性、方法、构造函数
字段：类中唯一存储数据
属性：保护字段，对字段的取值和赋值进行限定，属性的本质就是两个方法 get() set()
方法：对象的行为
构造函数：初始化对象(给对象的每个属性依次的赋值)，可以有重载。
类当中默认会有一个无参数的构造函数，当你写了一个新的构造函数之后，那个默认的无参数的
就被干掉了。

2)、类写好后，我们需要创建这个类的对象，我们管创建这个类的对象的过程称之为类的实例化。
使用关键字 new。

3)、保护字段的3种方式
1、get()
2、set()
3、构造函数


3、return
1、在方法中返回要返回的值
2、立即结束本次方法的执行


4、new的作用
1、创建对象
1)、在堆中开辟空间
2)、在开辟的堆空间中创建对象
3)、调用对象的构造函数

2、在子类中隐藏从父类那里继承过来的成员

5、this
1、代表当前类的对象
2、显示的调用自己的构造函数


6、base
1、显示的调用父类的构造函数
2、调用父类中的重名方法


7、继承
好处：减少代码的冗余。
子类继承了父类，继承了什么？
子类继承了父类的属性和方法，并没有继承私有字段。
构造函数有没有继承？
子类并没有继承父类的构造函数，而是会去调用父类那个无参数的构造函数。
目的：为了初始化父类，能够让子类调用到父类中的成员。

当你在父类中重新写了有参数的构造函数之后，那个无参数的就被干掉了，
此时，子类调不到了，解决办法：
1、在父类中重新写一个无参数的构造函数
2、在子类中显示的调用父类的构造函数 :base

8、单例模式
目的:只创建同一个对象。
1、将要创建的对象所在的类的构造函数私有化。


9、静态和非静态
1、在一个类中，如果既有静态成员，也有非静态成员，则首先初始化静态成员，并且只初始化一次，
不管你有多少个对象，都只初始化一次。
而我们的非静态成员，有多少个对象，就初始化多少次。

2、在整个项目当中静态成员是资源共享的。

3、静态成员只有在整个项目都结束的时候，才释放资源。


10、里氏转换
1、子类可以赋值给父类(如果有一个地方需要父类作为参数，我们可以给一个子类代替)
2、如果这个父类中装的是子类对象，则可以将这个父类强转为子类对象。

11
is：表示类型转换，如果转换成功返回一个true，否则返回false
as：表示类型转换，如果转换成功，则返回对应的对象，否则返回null

12、访问修饰符
public:公开的公共的，在哪都可以访问到。
internal：只能在当前项目内部访问，在项目的内部，public的权限跟internal是一样的。
private：私有的，只能在当前类的内部访问。
protected ：受保护的，只能在当前类的内部以及该类的子类中访问。
protected internal：
修饰符类的访问修饰符：public internal
修饰符类中的成员的访问修饰符：public private internal protected  protected internal

注意：子类的访问权限不能高于父类的访问权限。
因为子类肯能会暴漏父类的成员。


13、多态
1、虚方法
2、抽象类
3、接口






