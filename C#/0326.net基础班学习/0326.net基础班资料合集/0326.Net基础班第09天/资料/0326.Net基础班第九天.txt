1、类的语法
[访问修饰符] class 类名
{
	类的成员;
	//字段、属性、方法
}
访问修饰符：public
类名：Pascal 要求每个单词的首字母都要大写。

2、我们写好了一个类之后，需要创建这个类对象，我们管创建这个类的对象的过程，
称之为类的实例化。
使用关键字 new.

3、类中成员的作用
1)、字段：存储数据

4、类中的成员如果不加访问修饰符，默认是private
private：私有的，只能在类的内部访问，出了这个类之后，就访问不到了。

5、this
this代表当前类的对象


6、类是不占内存的，而对象是占内存的

7、属性的作用就是保护字段，对字段的取值和设值进行限定。

8、字段就是女人，而属性就是男人。


9、三种属性
既有get方法也有set方法的属性我们称之为可读可写属性
只有get方法没有set方法我们称之为只读属性
只有set方法没有get方法我们称之为只写属性

10、
对象创建好后，依次的给对象的每个属性赋值，这个过程我们称之为对象的初始化。

11、构造函数
主要作用就是对 对象进行初始化。
构造函数其实就是一个函数，只不过是一个特殊的函数。
语法：
public 构造函数名()
{
	代码;
}
1、没有返回值，连void也不能写。
2、构造函数的名称必须跟类名一致。

12、调用构造函数
new的作用：
1)、在内存的堆中开辟空间
2)、在开辟的堆空间中创建对象
3)、调用对象的构造函数

13、构造函数的特点
1)、可以重载
2)、类中默认会有一个无参数的构造函数，当你写了一个新的构造函数后，那个默认的无参数的
构造函数就被干掉了。

14、静态和非静态的区别
静态成员需要被static修饰，非静态成员不需要加static。
问题1：在一个非静态类中，是否允许出现静态成员？
答：非静态类中是可以出现静态成员的。
问题2：在非静态函数中，能不能够访问到静态成员？
答：在非静态函数中，既可以访问到非静态成员，也可以访问到静态成员。
问题3：在静态函数中，能不能够访问到非静态成员？
答：静态方法只能够访问到静态成员。
问题4：在静态类中能否出现非静态成员？
答：不可以，在静态类中，只允许出现静态成员。
<!--在调用上，静态和非静态的区别-->
1、在调用实例成员的时候，需要使用对象去调用
2、在调用静态成员的时候，必须使用类名.静态成员名;
3、静态类是不允许创建对象的

什么时候使用静态类，什么时候使用非静态类？
如果你写的类属于工具类，可以考虑写成静态类。
静态的好处：资源共享。
静态类应该越少越好。

15、GC Gargbage Collection
当我们程序结束之后，GC会扫描整个内存，发现，如果有的空间没有被指向，
则马上把这块空间销毁。


16、在一个项目中引用另一个项目的类
1、添加要引用的类所在的项目。
2、引用命名空间

17、访问修饰符
public :公开的，公共的
private：私有的，只能在类的内部访问，出了这个类之后，就访问不到了。
能够修饰类的访问修饰符只有两个：
1)、public
2)、internal：表示只能在当前程序集的内部进行访问，出了这个程序集就访问不到啦。
对于咱们而言，现阶段就将程序集理解为当前项目。

18、字符串
由于字符串的不可变性，所以，当我们需要给一个字符串进行大量的拼接、赋值等操作的时候，
会产生大量的内存垃圾，所以说，这么做是不合算的。
如果你需要对一个字符串进行大量的重复，拼接等操作，我们推荐使用StringBuilder

19、字符串的各种方法
ToCharArray():将字符串转换成char类型的数组
new string(char[] chs):将一个字符数组转换成一个字符串
ToUpper():表示将一个字符串转换成大写形式。
ToLower():表示将一个字符串转换成小写形式。
Equals("要比较的字符串",StringComparison.OrdinalIgnoreCase)：比较字符串，忽略大小写；Equals的第三个重载
Split(new char[]{'要分割的字符串'},StringSplitOption.RemoveEmptyEntries):分割字符串，返回一个字符串类型的数组
Substring():截取字符串




















